generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id              String           @id @default(auto()) @map("_id") @db.ObjectId
  name            String
  email           String           @unique
  password        String?
  image           String?
  recommendations Recommendation[]
  accounts        Account[]
  sessions        Session[]
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
}

model Category {
  id              String           @id @default(auto()) @map("_id") @db.ObjectId
  name            String
  slug            String           @unique
  recommendations Recommendation[]
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
}

model Recommendation {
  id              String           @id @default(auto()) @map("_id") @db.ObjectId
  title           String
  slug            String           @unique
  description     String?
  website         String?
  latitude        Float?
  longitude       Float?
  category        Category         @relation(fields: [categoryId], references: [id])
  categoryId      String           @db.ObjectId
  user            User             @relation(fields: [userId], references: [id])
  userId          String           @db.ObjectId
  history         RecommendationHistory[]
  recommendationCount Int          @default(0)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
}

model RecommendationHistory {
  id              String           @id @default(auto()) @map("_id") @db.ObjectId
  recommendation  Recommendation   @relation(fields: [recommendationId], references: [id])
  recommendationId String          @db.ObjectId
  title           String
  description     String?
  website         String?
  latitude        Float?
  longitude       Float?
  createdAt       DateTime         @default(now())
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier  String
  token       String   @unique
  expires     DateTime

  @@unique([identifier, token])
} 